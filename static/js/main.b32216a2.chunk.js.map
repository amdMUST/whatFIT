{"version":3,"sources":["displayOptions.js","feel.js","App.js","serviceWorker.js","index.js"],"names":["options","unit","size","DisplayOptions","newSize","newUnit","setSize","e","target","value","setUnit","checkIfActiveUnit","checkIfActiveSize","className","onClick","getColor","temp","Math","round","convertFtoC","getSmallFeel","getMediumFeel","getLargeFeel","React","Component","Feel","api","App","useState","Unit","Size","query","setQuery","weather","setWeather","main","type","placeholder","onChange","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","description","feeling","getColdResponse","getMehResponse","getPerfectResponse","getWarmResponse","getHotResponse","getResponse","id","displayOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b32216a2.chunk.js","sourcesContent":["import React from 'react';\n\n// basically the settings\nvar options = {\n    unit: \"fahrenheit\",\n    size: \"m\"\n}\n\n// going to declare the units and the size here\nfunction DisplayOptions( [ Size, newSize ], [ Unit, newUnit ] ) {\n\n    function setSize(e){\n      const size = e.target.value;\n      //console.log(options.size + ' => ' + size);\n      options.size = size;\n      newSize(size);\n    }\n\n    function setUnit(e){\n      const unit = e.target.value;\n      options.unit = unit;\n      newUnit(unit);\n    }\n\n    function checkIfActiveUnit(unit){\n      return unit === options.unit;\n    }\n\n    function checkIfActiveSize(size){\n      return size === options.size;\n  }\n\n  // gives you all the options you can change\n  return (\n    <div className=\"options\">\n\n        <div className=\"options-unit\">\n            How do you like\n            <br></br>\n            your weather?\n            <br></br><br></br>\n            <div className={ (checkIfActiveUnit('fahrenheit')) ? 'unit active' : 'unit' }>\n                <button value = \"fahrenheit\" className=\"unit-button\" onClick= {setUnit}>\n                    fahrenheit \n                </button>\n            </div>\n            \n            <div className={ (checkIfActiveUnit('celsius')) ? 'unit active' : 'unit' }>\n                <button value = \"celsius\" className=\"unit-button\" onClick= {setUnit}>\n                    celsius\n                </button>\n            </div>\n            <br></br>\n        </div>\n\n        <div className=\"options-size\">\n            What size body \n            <br></br>\n            do you wear?\n            <br></br><br></br>\n            <div className={ (checkIfActiveSize('s')) ? 'size active' : 'size' }>\n                <button value='s' className=\"size-button\" onClick= {setSize}>\n                    small\n                </button>\n            </div>\n            <div className={ (checkIfActiveSize('m')) ? 'size active' : 'size' }>\n                <button value='m' className=\"size-button\" onClick= {setSize}>\n                    medium\n                </button> \n            </div>\n            <div className={ (checkIfActiveSize('l')) ? 'size active' : 'size' }>\n                <button value='l' className=\"size-button\" onClick= {setSize}>\n                    large\n                </button>\n            </div>\n        </div>\n\n    </div>\n  \n  \n  );\n}\nexport default DisplayOptions;\nexport { options };","import React from 'react'\n//import App from './App';\n\nclass Feel extends React.Component {\n    // i do not know what to do here  \n    render () {\n    return <div className='message-box'>\n      Hello { this.props.name }\n    </div>\n  }\n}\n\n// because as an american, i only understand things in the imperial system lol\nfunction convertFtoC( unit, temp ){\n    return Math.round( (temp * (9/5)) + 32 );\n}\n\n// figure out what color the background should be based on size and temp\nfunction getColor( size, unit, temp ){\n\n    if( unit === 'celsius'){\n        temp = convertFtoC(unit,temp);\n    }\n\n    if( size === 's' ){\n        return getSmallFeel(temp,unit);\n    }\n    else if( size === 'm' ){\n        return getMediumFeel(temp);\n    }\n    else{\n        return getLargeFeel(temp);\n    }\n}\n\n\nfunction getSmallFeel( temp ){\n\n    if(temp<=59){\n        return 'cold';\n    }\n    else if(temp<=69 && temp>=60){\n        return 'meh';\n    }\n    else if(temp<=77 && temp>=70){\n        return 'perfect';\n    }\n    else if(temp<=87 && temp>=78){\n        return 'warm';\n    }\n    else if(temp>=88){\n        return 'hot';\n    }\n}\n\n\nfunction getMediumFeel( temp ){\n\n    if(temp<=58){\n        return 'cold';\n    }\n    else if(temp<=66 && temp>=59){\n        return 'meh';\n    }\n    else if(temp<=78 && temp>=67){\n        return 'perfect';\n    }\n    else if(temp<=87 && temp>=79){\n        return 'warm';\n    }\n    else if(temp>=88){\n        return 'hot';\n    }\n}\n\n\nfunction getLargeFeel( temp ){\n\n    if(temp<=55){\n        return 'cold';\n    }\n    else if(temp<=65 && temp>=56){\n        return 'meh';\n    }\n    else if(temp<=82 && temp>=66){\n        return 'perfect';\n    }\n    else if(temp<=88 && temp>=83){\n        return 'warm';\n    }\n    else if(temp>=89){\n        return 'hot';\n    }\n}\n\n// main function to get back the clothing tips, based on weather and feel\nfunction getResponse( size, unit, temp, weather ){\n\n    var feeling = getColor( size, unit, temp );\n\n    if( feeling === 'cold' ){\n        return getColdResponse( weather );\n    }\n    else if( feeling === 'meh' ){\n        return getMehResponse( weather );\n    }\n    else if( feeling === 'perfect' ){\n        return getPerfectResponse( weather );\n    }\n    else if( feeling === 'warm' ){\n        return getWarmResponse( weather );\n    }else{\n        return getHotResponse( weather );\n    }\n\n}\n\n// these are gonna be the response based on the weather\nfunction getColdResponse( weather ){\n    switch( weather ){\n        case 'Clear':\n            return 'You should wear a jacket or coat!';\n        case 'Clouds': \n            return 'You should wear a jacket and carry an umbrella with you!';\n        case 'Rain':\n            return 'You should wear a rainjacket, sweater, and probably bring an umbrella! \\nMaybe add some boots for aesthetic too.';\n        case 'Thunderstorm':\n            return 'You should wear a rainjacket, sweater, and bring an umbrella! \\nOh and also some rainboots would be nice.';\n        case 'Snow':\n            return 'You should stay home. But if you need to leave then wear ALOT of layers and some Boots!';\n        default:\n            return 'Yea wear a jacket and some shoes!';\n    }\n}\n\nfunction getMehResponse( weather ){\n    switch( weather ){\n        case 'Clear':\n            return 'Its meh outside right now, like maybe a long sleeve or pants would be good!';\n        case 'Clouds': \n            return 'Its meh outside right now, like maybe a long sleeve or pants would be good. \\nRemember to keep an umbrella on you though!';\n        case 'Rain':\n            return 'Its meh outside. You should wear a rainjacket and some type of pants, I recommend some corduroys!';\n        case 'Thunderstorm':\n            return 'Its meh outside. You should wear a rainjacket and some boots, I recommend Dr.Martins!';\n        case 'Snow':\n            return 'Yea its meh but also like its snowing, so isnt that beautiful?';\n        default:\n            return 'Yea wear a jacket or coat with some shoes!';\n    }\n}\n\nfunction getPerfectResponse( weather ){\n    switch( weather ){\n        case 'Clear':\n            return 'It is perfect outside, wear LITERALLY anything you want. \\nEnjoy your life (if you want)';\n        case 'Clouds': \n            return 'It is perfect outside, wear whatever youre comfortable in. \\nALSO bring an umbrella, or dont!';\n        case 'Rain':\n            return 'It feels great, but its raining so please bring an umbrella or rain jacket! \\nlove mom<3';\n        case 'Thunderstorm':\n            return 'You should wear a rainjacket and an umbrella. It feels great outside!';\n        case 'Snow':\n            return 'Impossible! where do you live??'\n        default:\n            return 'Yea wear a shirt and some shoes, you should be fine!';\n    }\n}\n\nfunction getWarmResponse( weather ){\n    switch( weather ){\n        case 'Clear':\n            return 'Ooh its warm outside, You should wear something light. \\nWatch for armpit stains, keep an AXE can on you.';\n        case 'Clouds': \n            return 'Its warm and it might rain, wow. Wear something light and bring an umbrella or rain jacket.';\n        case 'Rain':\n            return 'You should wear a rainjacket but like also its so hot. Maybe just an umbrella? Its on you';\n        case 'Thunderstorm':\n            return 'Its warm and a storm is coming, I would just relax inside with the AC. \\nBring a raincoat if you need to go somewhere';\n        case 'Snow':\n            return 'It cant be warm and snowing at the same time. Nice try corporate america!!';\n        default:\n            return 'Dont wear too many clothes, thats how you end up sweating through your whole shirt';\n    }\n}\n\nfunction getHotResponse( weather ){\n    switch( weather ){\n        case 'Clear':\n            return 'You should wear nothing, its so hot outside oh my god please dont go out there!';\n        case 'Clouds': \n            return 'Wear as little as possible, its so hot. just remember to bring an umbrella with you incase it rains!';\n        case 'Rain':\n            return 'Yea you should wear as little as possible but also take a rain pancho and umbrella!';\n        case 'Thunderstorm':\n            return 'yea its super hot outside but also you might get hit by lightning so... maybe dont go outside';\n        case 'Snow':\n            return 'Yea impossible to be this hot and snow at the same time so maybe escape the snowglobe you are trapped in!';\n        default:\n            return 'Yea wear as little as possible, dont wear anything';\n    }\n}\n\n\nexport default Feel;\nexport { getColor, getResponse };","import React, { useState } from 'react';\nimport displayOptions from './displayOptions';\nimport { options } from './displayOptions';\nimport { getColor, getResponse } from './feel';\n\n// api key\nconst api = {\n  key: \"3c886625921753ac0c0f5abd142bbbb8\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n// func to convert c/f to imperial/metric\nfunction convert() {\n  return (options.unit === 'fahrenheit') ? 'imperial' : 'metric';\n}\n\n// main program\nfunction App() {\n\n  const [ Unit, newUnit ] = useState('fahrenheit');\n  const [ Size, newSize ] = useState('m');\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n\n    if( evt.key === \"Enter\" ){\n      fetch( `${api.base}weather?q=${query}&units=${convert()}&APPID=${api.key}` )\n        .then( res => res.json() )\n        .then( result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        })\n    }\n\n  }\n\n  const dateBuilder = (d) => {\n\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return  `${day} ${date}, ${month} ${year}`\n  }\n\n\n  return (\n    <div className={ (typeof weather.main != \"undefined\") ? 'app '  + getColor( options.size, options.unit, Math.round(weather.main.temp) ) : 'app' }>\n      <main>\n        \n        <div className=\"search-box\">\n          <input\n            type = \"text\"\n            className = \"search-bar\"\n            placeholder = \"Enter a city...\"\n            onChange = { e => setQuery(e.target.value) }\n            value = { query }\n            onKeyPress = { search }\n          ></input>\n\n        </div>\n\n        { (typeof weather.main != \"undefined\") ? (\n          <div>\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\"> { weather.name }, { weather.sys.country } </div>\n                <div className=\"date\"> { dateBuilder(new Date()) } </div>\n              </div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                { Math.round( weather.main.temp ) }°{options.unit === \"celsius\" ? 'C' : 'F' }\n              </div>\n              <div className=\"weather\">\n                { weather.weather[0].description }\n              </div>\n              <br></br><br></br>\n              <div className=\"rec\">\n                { getResponse(options.size, options.unit, Math.round(weather.main.temp), weather.weather[0].main ) }\n              </div>\n            </div>\n\n          </div>\n          ) : (\n            <div>\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\"></div>\n                <div className=\"date\"></div>\n              </div>\n            </div>\n\n            <div className=\"weather-box\">\n              <div className=\"temp\" id=\"mainTing\">\n                whatFIT\n              </div>\n              <div className=\"options\">\n                { displayOptions([ Size, newSize ], [ Unit, newUnit ]) }\n              </div>\n              <div className=\"weather\" id=\"landing\">\n                made by ahmed\n              </div>\n            </div>\n\n          </div>\n            \n            ) \n        }\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}